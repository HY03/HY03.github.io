I"LP<h1 id="snort">snort</h1>
<ul>
  <li>개요
    <ul>
      <li>IDS (네트워크 이상징후 감시) 중 하나
        <ul>
          <li>모든 트래픽을 감시하거나 샘플링을 통해 감시</li>
          <li>미리 설정값을 저장</li>
          <li>DB 와 비교, 알려진 공격 시그니처와 비교</li>
          <li>공격자의 침입 경로 Block</li>
          <li>사용자의 패턴을 분석해서 이상징후 탐지</li>
        </ul>
      </li>
      <li>마틴 로시가 1998 년에 sniffer and more 라는 표어 (네트워크 트래픽을 더 많이 감시) 로 개발</li>
      <li>프로토콜 검색, 컨텐츠 분석, 웜, 취약점 공격시도 탐지, 포트스캔, CGI</li>
    </ul>
  </li>
  <li>기능
    <ul>
      <li>snort 의 운영모드
        <ul>
          <li>Sniffer Mode</li>
          <li>Packet Logger Mode</li>
          <li>Network IDS/IPS Mode</li>
        </ul>
      </li>
      <li>패킷 스니퍼
        <ul>
          <li>패킷 스니핑을 통해 계속 화면에 출력 -&gt; 작은 네트워크 규모에서 사용</li>
        </ul>
      </li>
      <li>패킷 로거
        <ul>
          <li>로그 남기기</li>
        </ul>
      </li>
      <li>네트워크 IDS/IPS
        <ul>
          <li>네트워크 트래픽 분석을 통한 공격 탐지/차단</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>설치
    <ul>
      <li>RHEL (CentOS) 기준
        <ul>
          <li>DAQ (Data Acquistion Package) 설치</li>
          <li>Snort 패키지 설치</li>
        </ul>
      </li>
      <li>Talos(제작사) 에서 Ruleset(최근 공격 패턴을 탐지할 수 있는) 을 만들어 배포</li>
    </ul>
  </li>
  <li>Snort 구조
    <ul>
      <li>sniffer : 패킷을 보기 좋게 Decode</li>
      <li>preprocessor : 비정상 헤더구조 패킷, 트래픽 구분</li>
      <li>Detection Engine : Rule 기반의 탐지 엔진, 사전 정의된 Rule 에 매칭 되는지 확인, Payload 확인</li>
      <li>Alert / logging : Ruleset 에 일치하는 패킷에 대한 처리방법, SMB, SNMP, trap 등을 활용해 저장</li>
      <li>설정값 저장 위치 : <code class="language-plaintext highlighter-rouge">/etc/snort/snort.conf</code>
        <ul>
          <li>모니터링하고자 하는 Network 설정</li>
          <li>Rules 위치 수정</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Snort 명령어
    <ul>
      <li>Sniffer Mode
        <ul>
          <li>TCP/IP 패킷 헤더를 출력 : <code class="language-plaintext highlighter-rouge">snort -v</code></li>
          <li>TCP/ICMP/UDP 헤더와 IP를 출력 : <code class="language-plaintext highlighter-rouge">snort -vd</code></li>
          <li>패킷 데이터를 추가해서 표현하기 위한 명령어 : <code class="language-plaintext highlighter-rouge">snort -vde</code></li>
          <li><code class="language-plaintext highlighter-rouge">-v</code> : snort 를 패킷 sniffing 모드로 변경</li>
          <li><code class="language-plaintext highlighter-rouge">-d</code> : 모든 네트워크 계층 포함</li>
          <li><code class="language-plaintext highlighter-rouge">-e</code> : 데이터링크 계층의 헤더를 포함</li>
          <li><code class="language-plaintext highlighter-rouge">-c</code> : 패킷 검출</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Snort Rule / Signature
    <ul>
      <li>Header
        <ul>
          <li>내용
            <ul>
              <li>처리방식</li>
              <li>프로토콜</li>
              <li>IP주소</li>
              <li>포트번호</li>
            </ul>
          </li>
          <li>Rule 헤더 설정
            <ul>
              <li>Rule Actions
                <ul>
                  <li>패킷이 탐지되었을 때 처리방식</li>
                  <li>8가지 유형이 존재
                    <ul>
                      <li>alert : 알람을 발생시키고 로그를 남김</li>
                      <li>log : 패킷을 로그에 남김</li>
                      <li>pass : 패킷을 무시함</li>
                      <li>activate : alert 을 발생시키고, dynamic rule을 활성화</li>
                      <li>dynamic : activate rule 에 의해 활성화 되고, log rule 과 동일하게 동작</li>
                      <li>drop : 패킷을 차단하고 로그에 남김</li>
                      <li>reject : 패킷을 차단하고 로그를 남김, 메시지를 전달
                        <ul>
                          <li>TCP : TCP RST</li>
                          <li>UDP : ICMP port Unreachable</li>
                        </ul>
                      </li>
                      <li>sdrop : 패킷을 차단하지만 로그를 남기지 않음 (silent drop)</li>
                    </ul>
                  </li>
                  <li>Rule 이 매칭 되었을 때 처리방식</li>
                </ul>
              </li>
              <li>Protocols
                <ul>
                  <li>탐지할 프로토콜을 설정.</li>
                  <li>TCP, IP, UDP, ICMP</li>
                </ul>
              </li>
              <li>IP Addresses
                <ul>
                  <li>출발지, 목적지 IP 주소.</li>
                  <li>단일 IP, IP대역(CIDR표기), IP 리스트 (구분자:,) 등으로 표기, 부정연산자(!) 표현가능</li>
                </ul>
              </li>
              <li>Port Numbers
                <ul>
                  <li>출발지, 목적지 Port</li>
                  <li>단일 Port, Port Range (:이용), Port 리스트 표현
                    <ul>
                      <li>1:1023 : 1~1023</li>
                      <li>:39910 : 1 ~ 39910</li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>Direction Operator
                <ul>
                  <li>방향 지시자
                    <ul>
                      <li>출발지 -&gt; 목적지 (단방향)</li>
                      <li>출발지 &lt;&gt; 목적지 (양방향)</li>
                      <li>출발지 &lt;- 목적지 : 이러한 표현은 사용하지 않음</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>형태 : <code class="language-plaintext highlighter-rouge">action protocol ipaddr port direction ipaddr port</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">alert tcp any any -&gt; 192.168.59.0/24 80</code>
                <ul>
                  <li>192.168.59 대역의 80 포트에 들어오는 패킷을 탐지</li>
                </ul>
              </li>
              <li><code class="language-plaintext highlighter-rouge">log tcp $EXTERNAL_NET any &lt;&gt; $HOME_NET 80</code>
                <ul>
                  <li>외부 네트워크 IP 에서 내부 네트워크 80 포트간 송수신되는 패킷을 탐지</li>
                  <li><code class="language-plaintext highlighter-rouge">$EXTERNAL_NET</code>, <code class="language-plaintext highlighter-rouge">$HOME_NET</code> : <code class="language-plaintext highlighter-rouge">snort.conf</code> 에 정의된 환경변수</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Body : 옵션 설정
        <ul>
          <li>내용
            <ul>
              <li>패킷탐지 규칙을 명시</li>
              <li>snort 설정 generator 를 사용하여 간편하게 입력하는 방법도 존재</li>
            </ul>
          </li>
          <li>종류
            <ul>
              <li>일반</li>
              <li>Payload / 범위 관련</li>
              <li>Payload / 정규표현식</li>
              <li>Payload / HTTP</li>
              <li>이벤트 제한 관련</li>
            </ul>
          </li>
          <li>일반 옵션 설정
            <ul>
              <li>msg : alert, log 출력 시 이벤트 명으로 사용</li>
              <li>reference : rule 과 관련된 외부 취약점 정보 참조시 사용</li>
              <li>sid : 룰 식별자
                <ul>
                  <li>99이하 : 시스템 예약 sid</li>
                  <li>100 ~ 1000000 : snort 에서 배포하는 ruleset 에서 사용하는 sid</li>
                  <li>1000001 이상 : 사용자가 정의한 rule sid</li>
                </ul>
              </li>
              <li>classtype : 공격유형, 기본우선순위(위험도) 정의</li>
              <li>priority : 위험도에 대한 숫자, classtype 에서 지정한 우선순위(위험도) 를 덮어씀</li>
              <li>rev : revision - rule 수정횟수</li>
            </ul>
          </li>
          <li><strong>Payload / 범위 관련</strong> : 범위를 지정해주는 옵션을 사용하면 성능 향상, 오탐을 줄임
            <ul>
              <li>옵션
                <ul>
                  <li><strong>content</strong> : Payload 에서 검사할 문자열 설정 (전체 Payload 비교)
                    <ul>
                      <li>문자열 설정 시 text, text/binary, binary 형태 중 하나로 설정, 부정연산자 사용 가능
                        <ul>
                          <li>text 형식 : <code class="language-plaintext highlighter-rouge">content:"문자열</code></li>
                          <li>binary 형식 : <code class="language-plaintext highlighter-rouge">content:"|FFFF|문자열"</code>
                            <ul>
                              <li>FF : 헥사 값 예시</li>
                            </ul>
                          </li>
                          <li>text/binary 형식 : <code class="language-plaintext highlighter-rouge">content:"|FFFF|"</code></li>
                          <li>!(부정연산자) : <code class="language-plaintext highlighter-rouge">content:!"문자열"</code> - 문자열이 없는 것</li>
                          <li>Escape(<code class="language-plaintext highlighter-rouge">\</code>) 처리 필요 문자 : <code class="language-plaintext highlighter-rouge">"</code>, <code class="language-plaintext highlighter-rouge">;</code>, <code class="language-plaintext highlighter-rouge">\</code></li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                  <li>uricontent : HTTP Client 의 요청 URI (전체 Payload X) 에서 검사할 문자열 설정</li>
                  <li><strong>offset</strong> : Payload 에서 Content 문자열을 검사할 시작 위치를 지정
                    <ul>
                      <li>Payload 의 첫 번째 바이트 위치는 0 부터 시작</li>
                    </ul>
                  </li>
                  <li><strong>depth</strong> : offset 부터 몇 바이트까지 검사할 것인지 지정</li>
                  <li><strong>distance</strong> : <code class="language-plaintext highlighter-rouge">content:"문자열"</code> 이 매치된 경우
                    <ul>
                      <li>이후부터 몇 바이트 떨어진 위치에서 다음 content를 검사할 것인지 지정</li>
                    </ul>
                  </li>
                  <li><strong>within</strong> : <code class="language-plaintext highlighter-rouge">content:"문자열"</code> 이 매치된 경우
                    <ul>
                      <li>distance 부터 몇 바이트 범위 내에서 다음 content를 검사할 것인지 지정</li>
                    </ul>
                  </li>
                  <li>nocase : Payload 검사 시 대소문자를 구분하지 않음 (바이너리 형식도 동일)</li>
                </ul>
              </li>
              <li>예시 (29:10)
                <ul>
                  <li>FTP root 로그인 시도 탐지 (제공 Ruleset 사용)
                    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      alert tcp any any -&gt; 10.10.10.0/24 21
      (msg:"FTP root user access";content:"USER root";nocase;sid:100100;)
</code></pre></div>                    </div>
                  </li>
                  <li>테스트 (content)
                    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any
      (msg:"[TEST]content_text";content:"/etc/passwd";nocase;sid:1000020;)
</code></pre></div>                    </div>
                  </li>
                  <li>테스트 (offset) - 3번째 바이트부터 (2) 3바이트 이내(2~4)에 5457 문자열이 있는지 확인
                    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any
      (msg:"[TEST]offset";content:"5457";offset:2;depth:3;nocase;sid:1000030;)
</code></pre></div>                    </div>
                  </li>
                  <li>테스트 (distance, within) - 3번째 바이트부터 (2) 5바이트 이내 (2~6) 에서 369 문자열을 찾고, 4바이트 (7,8,9,A) 떨어진 위치 (B) 에서부터 3바이트 이내 (B,C,D) 에서 ABC 문자열을 찾아 만족하면 알림 출력
                    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any
      (msg:"[TEST]distance, within";content:"369";offset:2;depth:5;content:"ABC";distance:4;within:3;nocase;sid:1000034;)
</code></pre></div>                    </div>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Payload / 정규표현식
            <ul>
              <li>정규표현식 : 일정 규칙을 갖는 문자열을 표현하는 방식</li>
              <li>옵션 : PCRE (Perl Compatible Regular Expression) - Snort 에서는 Perl 기반 정규표현을 사용
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">pcre="/정규표현삭/"</code></li>
                </ul>
              </li>
              <li>메타문자
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">\</code> : escape 문자로 사용 (특수문자 기능 제거)</li>
                  <li><code class="language-plaintext highlighter-rouge">^</code> : 캐럿. 다음에 나오는 문자는 문자열의 시작을 의미</li>
                  <li><code class="language-plaintext highlighter-rouge">$</code> : $ 앞의 문자는 문자열의 끝을 의미</li>
                  <li><code class="language-plaintext highlighter-rouge">.</code> : 임의의 문자 한 개를 의미함</li>
                  <li><code class="language-plaintext highlighter-rouge">[]</code> : 집합 안에 지정한 문자들 중 하나와 일치
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">[a-zA-Z]</code> : 소문자 a-z 사이 + 대문자 A-Z 사이 중 한 문자와 일치</li>
                      <li><code class="language-plaintext highlighter-rouge">[0-9]</code> : 0~9 사이의 숫자 중 하나</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">[^]</code> : 집합 안에 지정한 문자들을 제외한 임의의 문자 중 하나와 일치
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">[^0-9]</code> : 숫자를 제외한 임의의 문자 중 하나와 일치</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">|</code> : OR, 항목을 묶을 때는 소괄호를 이용
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">(x|y|z)</code> : x or y or z</li>
                      <li><code class="language-plaintext highlighter-rouge">(tree|leaf|can)</code> : tree or leaf or can</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">*</code> : * 앞에 나오는 문자가 0회 이상 나타남을 의미
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">Hs*deo</code> : Hssdeo(O), Hdeo(O), Hsdeo(O), Hssssdeo(O) …. Hudeo(X)</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">+</code> : + 앞에 나오는 문자가 1회 이상 나타남을 의미</li>
                  <li><code class="language-plaintext highlighter-rouge">?</code> : ? 앞에 나오는 문자가 0회 또는 1회 이상 나타남을 의미
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">x?</code> : x가 존재하거나 존재하지 않음</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">x{n}</code> : <code class="language-plaintext highlighter-rouge">{n}</code> 앞에 오는 문자가 정확히 n 회 나타남
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">Ha{3}deo</code> : Haaadeo</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">x{n,}</code> : x를 n번 이상 반복함을 의미
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">Ha{3,}deo</code> : Haaadeo(O), Haaaadeo(O), …, Haadeo(X)</li>
                    </ul>
                  </li>
                  <li><code class="language-plaintext highlighter-rouge">x{n,m}</code> : x를 n번 이상 m번 이하 반복함을 의미</li>
                </ul>
              </li>
              <li>예시
                <ul>
                  <li>Get 또는 Post 로 시작하는 ‘=’ 나 ‘a=a’ 가 들어간 패킷 찾기
                    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      alert tcp $EXTERNAL_NET any -&gt; $HOME_NET any
      (msg:"[TEST]pcre";content:"+or+";
      content:"%27%3D%27";nocase;
      distance:0;within:20;pcre="/^(GET|POST)/"; sid:100050;)
</code></pre></div>                    </div>
                    <ul>
                      <li><code class="language-plaintext highlighter-rouge">+</code> 는 space 를 의미</li>
                      <li><code class="language-plaintext highlighter-rouge">%27%3D%27</code> : a=a</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>Payload / HTTP 관련 : HTTP 패킷에 대해 전체가 아닌 특정필드에서 패턴을 검사하는 기능 지원
            <ul>
              <li>HTTP 구조 : <code class="language-plaintext highlighter-rouge">GET /index.php HTTP/1.1</code></li>
              <li>옵션 : 옵션에 raw 가 붙은 경우 (http_raw_*) 디코딩 없이 검사. (uri, header, cookie)
                <ul>
                  <li><code class="language-plaintext highlighter-rouge">http_method</code> : HTTP 요청 시 method 부분을 검사 (GET)</li>
                  <li><code class="language-plaintext highlighter-rouge">http_uri</code> : HTTP URI 부분을 검사 (index.php)</li>
                  <li><code class="language-plaintext highlighter-rouge">http_header</code> : HTTP의 Header 부분을 검사 (response/request)</li>
                  <li><code class="language-plaintext highlighter-rouge">http_cookie</code> : HTTP의 Cookie 부분을 검사</li>
                  <li><code class="language-plaintext highlighter-rouge">http_client_body</code> : HTTP client 의 Body 부분을 검사 (POST 요청에 대한 검사)</li>
                  <li><code class="language-plaintext highlighter-rouge">http_stat_code</code> : HTTP 의 Status_code 부분을 검사 (HTTP/1.1 200 OK 의 200 부분)</li>
                  <li><code class="language-plaintext highlighter-rouge">http_stat_msg</code> : HTTP 의 Status_msg 부분을 검사 (HTTP/1.1 200 OK 의 OK 부분)</li>
                </ul>
              </li>
              <li>예시 : (20:30)</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET