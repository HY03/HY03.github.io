I"x(<h1 id="접근통제-보안모델">접근통제 보안모델</h1>
<ul>
  <li>접근통제의 모델
    <ul>
      <li>강제적 접근통제 (MAC) - Mandatory Access Control : 규칙기반(Rule Based)
        <ul>
          <li>자원 - 보안레벨 (Security Level)</li>
          <li>사용자 - 보안 취급인가 (Security Clearance)</li>
          <li>보안레벨과 보안 취급인가를 비교하여 접근통제</li>
          <li>Linux/Unix 는 객체(파일) 을 소유하고 있는 주체가 다른 사용자에게 권한 부여하나 MAC 에서는 주체가 다른 사용자에게 권한을 줄 수가 없음 (정해진 규칙(보안관리자가 통제) 만을 따름) - 강제적 접근통제
            <ul>
              <li>관리자만이 정보자원을 분류, 설정, 변경</li>
              <li>객체에 대한 접근 규칙 : <strong>규칙기반 접근통제</strong> (중앙집중형 보안관리) - 사용자가 통제를 수정할 수 없다.
                <ul>
                  <li>보안전문가에 의해 생성</li>
                  <li>운영자에 의해 설정</li>
                  <li>운영시스템에 의해서 집행</li>
                  <li>다른 보안기술에 의해 지원</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>단점
            <ul>
              <li>사용자의 기능이 매우 제한적</li>
              <li>관리적 부담이 크다</li>
              <li>비용이 많이 소요</li>
              <li>성능저하가 발생할 수 있음</li>
              <li>사용자 친화적이지 않음 : 상업적인 환경에 부적합</li>
              <li>주로 군 시스템에서 사용</li>
            </ul>
          </li>
          <li>보안레이블 (민감성레이블 - Sensitivity Label) : 시스템에 있는 자원이 얼마나 민감한 자원인지 수치화 (자원민감도, 중요성)
            <ul>
              <li>모든 객체(자원)에 할당 : 파일, 디렉토리, 장비 등</li>
            </ul>
          </li>
          <li>보안허가증 : 주체가 특정 객체(특정자원) 에 접근할 수 있는지 표시</li>
          <li>주체 S 는 객체 A 에 대한 보안허가증을 가지고 A에 접근 - 주체 S가 객체 A의 보안레이블 보다 보안허가가 높거나 같은 경우에 접근 가능</li>
          <li>MLS (MultiLevel Security) policy : 다중 수준 보안</li>
          <li>사용 예
            <ul>
              <li>BLP (벨라파둘라 모델) : 기밀성에 중점</li>
              <li>Biba : 무결성에 중점</li>
              <li>Clark-Willson Model : 무결성에 중점</li>
              <li>Chinese Wall Model (만리장성 모델) : 무결성/기밀성</li>
            </ul>
          </li>
          <li>사용 예
            <ul>
              <li>NSA, SELinux, Trusted Solaris</li>
              <li>DAC 모델로의 전환이 쉽지 않음 (보안레이블, 취급인가가 호환되지 않음)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>임의적 접근통제 (DAC) - Discretionary Access Control : 신분에 근거
        <ul>
          <li>TCSEC 표준 중 하나
            <ul>
              <li>1985년 발행된 안전한 컴퓨터 시스템을 위한 평가지침서</li>
            </ul>
          </li>
          <li>신원기반 접근통제 / 사용자기반 접근통제 / 혼합방식 접근통제 : 주체가 속한 그룹의 신원에 근거하여 객체에 대한 접근을 제한</li>
          <li>소유자의 임의성에 기반하여 접근통제</li>
          <li>사용자에게 동적으로 접근권한을 부여 : 분산형 보안관리</li>
          <li>유닉스/리눅스, Windows, Mac, DBMS 에서 이용</li>
          <li>통제기법
            <ul>
              <li>접근제어행렬 (Access Control Matrix)
                <ul>
                  <li>주체(Row)(터미널/host/프로그램/개별사용자/그룹사용자…)</li>
                  <li>객체(Column)</li>
                  <li>접근권한(Cell) (소유/읽기/쓰기/실행..)</li>
                  <li>관계를 표현 - 접근제어 정책을 관리</li>
                  <li>주체와 객체가 많아진다면 행렬이 커지고(관리어려움), 빈 공간이 많아짐(비효율적)</li>
                </ul>
              </li>
              <li>자격목록 (CL - Capability List) : 한 주체가 갖는 자격(권한)들의 리스트
                <ul>
                  <li>권한 -&gt; 주체가 객체에 대해 갖는 접근권한</li>
                  <li>접근제어 행렬을 행(Row)단위로 관리하는 것</li>
                  <li>Linked List 로 표현됨
                    <ul>
                      <li>
                        <table>
                          <tbody>
                            <tr>
                              <td>홍길동 -&gt; 파일A(RWX)</td>
                              <td>포인터 -&gt; 파일C(RW)</td>
                              <td>포인터 -&gt; 파일D(R)</td>
                            </tr>
                          </tbody>
                        </table>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>접근제어목록 (ACL - Access Control List)
                <ul>
                  <li>자격목록 : 주체 관점 / 접근제어목록 : 객체 관점</li>
                  <li>객체의 관점에서 객체에 어떤 주체가 어떤 접근권한을 갖는지 명시</li>
                  <li>접근제어 행렬을 열(Column)단위로 관리하는 것</li>
                  <li>Linked List 로 표현됨
                    <ul>
                      <li>
                        <table>
                          <tbody>
                            <tr>
                              <td>파일 A -&gt; 홍길동(RWX)</td>
                              <td>포인터 -&gt; 고길동(RW)</td>
                              <td>포인터 -&gt; 강길동(R)</td>
                            </tr>
                          </tbody>
                        </table>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>장점
            <ul>
              <li>객체별 세분화된 접근제어가 가능</li>
              <li>객체의 소유자가 다른 주체에게 임의적으로 접근권한 부여가 가능 -&gt; 유연한 접근제어 서비스</li>
            </ul>
          </li>
          <li>단점
            <ul>
              <li>시스템 전체적으로 접근제어이 일관성이 부족</li>
              <li>권한이 높은 주체가 다른 주체에게 임의로 자료에 대한 접근을 허용할 수 있음</li>
              <li>주체의 신분에 따라 접근 통제가 이루어지므로 다른 주체의 신분을 사용해 불법적 접근을 할 수 있음</li>
              <li>멀웨어 (웜, 루트킷, 트로이목마, 키로거 등 악성코드) 취약점이 존재
                <ul>
                  <li>트로이목마 예시
                    <ul>
                      <li>Data File 에 대해 user1 이 rw 권한을 가지고 있다.</li>
                      <li>user1 은 프로그램을 이용해 Data File 에 접근한다.</li>
                      <li>Attacker 는 프로그램 안에 트로이목마를 심고, 이 프로그램에 대응하는 Back-Pocket 파일을 생성 (Attacker 는 rw, user1 은 w 권한을 가짐)</li>
                      <li>Attacker 는 프로그램에 user1의 권한을 부여, user1 은 트로이목마가 심어진 프로그램을 실행</li>
                      <li>user1 은 프로그램을 이용해 Data File 을 읽고, 해당 내용을 Back-Pocket 파일에 쓴다.</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>역할기반 접근통제 (RBAC) - Role Based Access Control : 역할에 기반
        <ul>
          <li>개요
            <ul>
              <li>역할에 기반 : 접근제어 관리가 단순</li>
              <li>MAC과 DAC의 약점을 보완한 방식 - 권한을 역할에 연관시킴</li>
              <li>그룹과 역할의 구분
                <ul>
                  <li>그룹 : 사용자들의 집합 (권한의 집합은 아님)</li>
                  <li>역할 : 사용자들의 집합 &amp; 권한의 집합</li>
                </ul>
              </li>
              <li>중앙에서 관리되는 통제의 모음을 사용
                <ul>
                  <li>관리자에 의해서 중앙집중적인 역할 (사용자집합 &amp; 권한집합) 설정</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>장점
            <ul>
              <li>전체 시스템 관점에서 일관성 있는 접근제어가 가능</li>
              <li>역할만 사용자에게 부여하면 됨
                <ul>
                  <li>정적이면서 동적인 접근통제
                    <ul>
                      <li>중앙에서 역할을 정의 (정적)
                        <ul>
                          <li>Role1 (File1)</li>
                          <li>Role2 (File1, File2)</li>
                          <li>Role3 (File1, File2, File3)</li>
                        </ul>
                      </li>
                      <li>사용자와 역할을 할당 (동적)
                        <ul>
                          <li>user1 -&gt; Role1</li>
                          <li>User2 -&gt; Role1, Role2 (1:1일 필요 없음)</li>
                          <li>user3 -&gt; Role3 -&gt; Role2</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>단점
            <ul>
              <li>역할수행에 반드시 필요한 접근권한만 부여해야 함 (최소권한부여원칙 준수-&gt;직무분리원칙 충족용이)</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET